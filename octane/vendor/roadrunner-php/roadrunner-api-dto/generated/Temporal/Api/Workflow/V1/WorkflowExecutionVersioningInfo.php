<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: temporal/api/workflow/v1/message.proto

namespace Temporal\Api\Workflow\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Holds all the information about versioning for a workflow execution.
 * Experimental. Versioning info is experimental and might change in the future.
 *
 * Generated from protobuf message <code>temporal.api.workflow.v1.WorkflowExecutionVersioningInfo</code>
 */
class WorkflowExecutionVersioningInfo extends \Google\Protobuf\Internal\Message
{
    /**
     * Versioning behavior determines how the server should treat this execution when workers are
     * upgraded. When present it means this workflow execution is versioned; UNSPECIFIED means
     * unversioned. See the comments in `VersioningBehavior` enum for more info about different
     * behaviors.
     * This field is first set after an execution completes its first workflow task on a versioned
     * worker, and set again on completion of every subsequent workflow task.
     * Note that `behavior` is overridden by `versioning_override` if the latter is present.
     *
     * Generated from protobuf field <code>.temporal.api.enums.v1.VersioningBehavior behavior = 1;</code>
     */
    protected $behavior = 0;
    /**
     * The worker deployment that completed the last workflow task of this workflow execution. Must
     * be present if `behavior` is set. Absent value means no workflow task is completed, or the
     * last workflow task was completed by an unversioned worker. Unversioned workers may still send
     * a deployment value which will be stored here, so the right way to check if an execution is
     * versioned if an execution is versioned or not is via the `behavior` field.
     * Note that `deployment` is overridden by `versioning_override` if the latter is present.
     *
     * Generated from protobuf field <code>.temporal.api.deployment.v1.Deployment deployment = 2;</code>
     */
    protected $deployment = null;
    /**
     * Present if user has set an execution-specific versioning override. This override takes
     * precedence over SDK-sent `behavior` (and `deployment` when override is PINNED). An override
     * can be set when starting a new execution, as well as afterwards by calling the
     * `UpdateWorkflowExecutionOptions` API.
     *
     * Generated from protobuf field <code>.temporal.api.workflow.v1.VersioningOverride versioning_override = 3;</code>
     */
    protected $versioning_override = null;
    /**
     * When present, indicates the workflow is transitioning to a different deployment. Can
     * indicate one of the following transitions: unversioned -> versioned, versioned -> versioned
     * on a different deployment, or versioned -> unversioned.
     * Not applicable to workflows with PINNED behavior.
     * When a workflow with AUTO_UPGRADE behavior creates a new workflow task, it will automatically
     * start a transition to the task queue's current deployment if the task queue's current
     * deployment is different from the workflow's deployment.
     * If the AUTO_UPGRADE workflow is stuck due to backlogged activity or workflow tasks, those
     * tasks will be redirected to the task queue's current deployment. As soon as a poller from
     * that deployment is available to receive the task, the workflow will automatically start a
     * transition to that deployment and continue execution there.
     * A deployment transition can only exist while there is a pending or started workflow task.
     * Once the pending workflow task completes on the transition's target deployment, the
     * transition completes and the workflow's `deployment` and `behavior` fields are updated per
     * the worker's task completion response.
     * Pending activities will not start new attempts during a transition. Once the transition is
     * completed, pending activities will start their next attempt on the new deployment.
     *
     * Generated from protobuf field <code>.temporal.api.workflow.v1.DeploymentTransition deployment_transition = 4;</code>
     */
    protected $deployment_transition = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $behavior
     *           Versioning behavior determines how the server should treat this execution when workers are
     *           upgraded. When present it means this workflow execution is versioned; UNSPECIFIED means
     *           unversioned. See the comments in `VersioningBehavior` enum for more info about different
     *           behaviors.
     *           This field is first set after an execution completes its first workflow task on a versioned
     *           worker, and set again on completion of every subsequent workflow task.
     *           Note that `behavior` is overridden by `versioning_override` if the latter is present.
     *     @type \Temporal\Api\Deployment\V1\Deployment $deployment
     *           The worker deployment that completed the last workflow task of this workflow execution. Must
     *           be present if `behavior` is set. Absent value means no workflow task is completed, or the
     *           last workflow task was completed by an unversioned worker. Unversioned workers may still send
     *           a deployment value which will be stored here, so the right way to check if an execution is
     *           versioned if an execution is versioned or not is via the `behavior` field.
     *           Note that `deployment` is overridden by `versioning_override` if the latter is present.
     *     @type \Temporal\Api\Workflow\V1\VersioningOverride $versioning_override
     *           Present if user has set an execution-specific versioning override. This override takes
     *           precedence over SDK-sent `behavior` (and `deployment` when override is PINNED). An override
     *           can be set when starting a new execution, as well as afterwards by calling the
     *           `UpdateWorkflowExecutionOptions` API.
     *     @type \Temporal\Api\Workflow\V1\DeploymentTransition $deployment_transition
     *           When present, indicates the workflow is transitioning to a different deployment. Can
     *           indicate one of the following transitions: unversioned -> versioned, versioned -> versioned
     *           on a different deployment, or versioned -> unversioned.
     *           Not applicable to workflows with PINNED behavior.
     *           When a workflow with AUTO_UPGRADE behavior creates a new workflow task, it will automatically
     *           start a transition to the task queue's current deployment if the task queue's current
     *           deployment is different from the workflow's deployment.
     *           If the AUTO_UPGRADE workflow is stuck due to backlogged activity or workflow tasks, those
     *           tasks will be redirected to the task queue's current deployment. As soon as a poller from
     *           that deployment is available to receive the task, the workflow will automatically start a
     *           transition to that deployment and continue execution there.
     *           A deployment transition can only exist while there is a pending or started workflow task.
     *           Once the pending workflow task completes on the transition's target deployment, the
     *           transition completes and the workflow's `deployment` and `behavior` fields are updated per
     *           the worker's task completion response.
     *           Pending activities will not start new attempts during a transition. Once the transition is
     *           completed, pending activities will start their next attempt on the new deployment.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Temporal\Api\Workflow\V1\Message::initOnce();
        parent::__construct($data);
    }

    /**
     * Versioning behavior determines how the server should treat this execution when workers are
     * upgraded. When present it means this workflow execution is versioned; UNSPECIFIED means
     * unversioned. See the comments in `VersioningBehavior` enum for more info about different
     * behaviors.
     * This field is first set after an execution completes its first workflow task on a versioned
     * worker, and set again on completion of every subsequent workflow task.
     * Note that `behavior` is overridden by `versioning_override` if the latter is present.
     *
     * Generated from protobuf field <code>.temporal.api.enums.v1.VersioningBehavior behavior = 1;</code>
     * @return int
     */
    public function getBehavior()
    {
        return $this->behavior;
    }

    /**
     * Versioning behavior determines how the server should treat this execution when workers are
     * upgraded. When present it means this workflow execution is versioned; UNSPECIFIED means
     * unversioned. See the comments in `VersioningBehavior` enum for more info about different
     * behaviors.
     * This field is first set after an execution completes its first workflow task on a versioned
     * worker, and set again on completion of every subsequent workflow task.
     * Note that `behavior` is overridden by `versioning_override` if the latter is present.
     *
     * Generated from protobuf field <code>.temporal.api.enums.v1.VersioningBehavior behavior = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setBehavior($var)
    {
        GPBUtil::checkEnum($var, \Temporal\Api\Enums\V1\VersioningBehavior::class);
        $this->behavior = $var;

        return $this;
    }

    /**
     * The worker deployment that completed the last workflow task of this workflow execution. Must
     * be present if `behavior` is set. Absent value means no workflow task is completed, or the
     * last workflow task was completed by an unversioned worker. Unversioned workers may still send
     * a deployment value which will be stored here, so the right way to check if an execution is
     * versioned if an execution is versioned or not is via the `behavior` field.
     * Note that `deployment` is overridden by `versioning_override` if the latter is present.
     *
     * Generated from protobuf field <code>.temporal.api.deployment.v1.Deployment deployment = 2;</code>
     * @return \Temporal\Api\Deployment\V1\Deployment|null
     */
    public function getDeployment()
    {
        return $this->deployment;
    }

    public function hasDeployment()
    {
        return isset($this->deployment);
    }

    public function clearDeployment()
    {
        unset($this->deployment);
    }

    /**
     * The worker deployment that completed the last workflow task of this workflow execution. Must
     * be present if `behavior` is set. Absent value means no workflow task is completed, or the
     * last workflow task was completed by an unversioned worker. Unversioned workers may still send
     * a deployment value which will be stored here, so the right way to check if an execution is
     * versioned if an execution is versioned or not is via the `behavior` field.
     * Note that `deployment` is overridden by `versioning_override` if the latter is present.
     *
     * Generated from protobuf field <code>.temporal.api.deployment.v1.Deployment deployment = 2;</code>
     * @param \Temporal\Api\Deployment\V1\Deployment $var
     * @return $this
     */
    public function setDeployment($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Deployment\V1\Deployment::class);
        $this->deployment = $var;

        return $this;
    }

    /**
     * Present if user has set an execution-specific versioning override. This override takes
     * precedence over SDK-sent `behavior` (and `deployment` when override is PINNED). An override
     * can be set when starting a new execution, as well as afterwards by calling the
     * `UpdateWorkflowExecutionOptions` API.
     *
     * Generated from protobuf field <code>.temporal.api.workflow.v1.VersioningOverride versioning_override = 3;</code>
     * @return \Temporal\Api\Workflow\V1\VersioningOverride|null
     */
    public function getVersioningOverride()
    {
        return $this->versioning_override;
    }

    public function hasVersioningOverride()
    {
        return isset($this->versioning_override);
    }

    public function clearVersioningOverride()
    {
        unset($this->versioning_override);
    }

    /**
     * Present if user has set an execution-specific versioning override. This override takes
     * precedence over SDK-sent `behavior` (and `deployment` when override is PINNED). An override
     * can be set when starting a new execution, as well as afterwards by calling the
     * `UpdateWorkflowExecutionOptions` API.
     *
     * Generated from protobuf field <code>.temporal.api.workflow.v1.VersioningOverride versioning_override = 3;</code>
     * @param \Temporal\Api\Workflow\V1\VersioningOverride $var
     * @return $this
     */
    public function setVersioningOverride($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Workflow\V1\VersioningOverride::class);
        $this->versioning_override = $var;

        return $this;
    }

    /**
     * When present, indicates the workflow is transitioning to a different deployment. Can
     * indicate one of the following transitions: unversioned -> versioned, versioned -> versioned
     * on a different deployment, or versioned -> unversioned.
     * Not applicable to workflows with PINNED behavior.
     * When a workflow with AUTO_UPGRADE behavior creates a new workflow task, it will automatically
     * start a transition to the task queue's current deployment if the task queue's current
     * deployment is different from the workflow's deployment.
     * If the AUTO_UPGRADE workflow is stuck due to backlogged activity or workflow tasks, those
     * tasks will be redirected to the task queue's current deployment. As soon as a poller from
     * that deployment is available to receive the task, the workflow will automatically start a
     * transition to that deployment and continue execution there.
     * A deployment transition can only exist while there is a pending or started workflow task.
     * Once the pending workflow task completes on the transition's target deployment, the
     * transition completes and the workflow's `deployment` and `behavior` fields are updated per
     * the worker's task completion response.
     * Pending activities will not start new attempts during a transition. Once the transition is
     * completed, pending activities will start their next attempt on the new deployment.
     *
     * Generated from protobuf field <code>.temporal.api.workflow.v1.DeploymentTransition deployment_transition = 4;</code>
     * @return \Temporal\Api\Workflow\V1\DeploymentTransition|null
     */
    public function getDeploymentTransition()
    {
        return $this->deployment_transition;
    }

    public function hasDeploymentTransition()
    {
        return isset($this->deployment_transition);
    }

    public function clearDeploymentTransition()
    {
        unset($this->deployment_transition);
    }

    /**
     * When present, indicates the workflow is transitioning to a different deployment. Can
     * indicate one of the following transitions: unversioned -> versioned, versioned -> versioned
     * on a different deployment, or versioned -> unversioned.
     * Not applicable to workflows with PINNED behavior.
     * When a workflow with AUTO_UPGRADE behavior creates a new workflow task, it will automatically
     * start a transition to the task queue's current deployment if the task queue's current
     * deployment is different from the workflow's deployment.
     * If the AUTO_UPGRADE workflow is stuck due to backlogged activity or workflow tasks, those
     * tasks will be redirected to the task queue's current deployment. As soon as a poller from
     * that deployment is available to receive the task, the workflow will automatically start a
     * transition to that deployment and continue execution there.
     * A deployment transition can only exist while there is a pending or started workflow task.
     * Once the pending workflow task completes on the transition's target deployment, the
     * transition completes and the workflow's `deployment` and `behavior` fields are updated per
     * the worker's task completion response.
     * Pending activities will not start new attempts during a transition. Once the transition is
     * completed, pending activities will start their next attempt on the new deployment.
     *
     * Generated from protobuf field <code>.temporal.api.workflow.v1.DeploymentTransition deployment_transition = 4;</code>
     * @param \Temporal\Api\Workflow\V1\DeploymentTransition $var
     * @return $this
     */
    public function setDeploymentTransition($var)
    {
        GPBUtil::checkMessage($var, \Temporal\Api\Workflow\V1\DeploymentTransition::class);
        $this->deployment_transition = $var;

        return $this;
    }

}

